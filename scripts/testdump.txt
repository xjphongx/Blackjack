#TESTING FOR CASINO SHUFFLING, WORKED ON CUT AND SHUFFLE FUNCTION
mainList = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18] #18 numbers
tempList = []
print("Before Algorithm")
print(f"mainList {mainList}")    
print(f"tempList {tempList}\n")
mainLength = int(len(mainList))
print(mainLength)

#0-17
#index 9 to index 18
for i in range(int(mainLength/2), mainLength):
    tempList.append(mainList[i])

for j in range(int(mainLength/2), mainLength):
    mainList.pop()

print("\nAfter split Algorithm")
print(f"mainList {mainList}")    
print(f"tempList {tempList}\n")

#Alternately shuffle the two list into a shuffled list
shuffledList = []
for k in range(int(mainLength/2)):
    try:
        shuffledList.append(mainList.pop(0))
        shuffledList.append(tempList.pop(0))
    except IndexError:
        print("Index error when casino shuffling")
        break

mainList = shuffledList[:]
print(mainList)


print("\nAfter alternating Algorithm")
print(f"mainList {mainList}")    
print(f"tempList {tempList}")


###############################################################
#testing hand, card, and stack interaction
from Hand import Hand
from Card import Card
from Stack import Stack

#testing adding Card objects to a Hand object
testCard1 = Card("Five",5,"Hearts")
testCard2 = Card("Jack",10,"Diamonds")
testCard3 = Card("King",10,"Spades")
testCard4 = Card("Three",3,"Clubs")

testHand = Hand()
testHand.add_card_to_hand(testCard1)
testHand.add_card_to_hand(testCard2)
testHand.add_card_to_hand(testCard3)
testHand.add_card_to_hand(testCard4)
print(f"Sum of Current Hand: {testHand.hand_sum}")
for i in range(testHand.hand_size):
    print(testHand.card_in_hand_list[i].get_card_type())

print("\ntesting removals below")
removed_card = testHand.remove_card_from_hand()
print(f"removed card: {removed_card.get_card_type()}")
testHand.update_hand()

print(f"Sum of test Hand after removal: {testHand.hand_sum}")
print(f"testHand")
for i in range(testHand.hand_size):
    print(testHand.card_in_hand_list[i].get_card_type())

#move the whole hand to a discard stack
print("\nMoving whole hand to discard")
discard_pile = Stack()
discard_pile.stack.extend(testHand.card_in_hand_list)
testHand.card_in_hand_list.clear()
testHand.reset_hand_sum()
testHand.update_hand()
print(f"Discard pile container: {discard_pile.show()}")
print(f"test hand container: {testHand.card_in_hand_list}")
#ending notes: discard stack extends testhand stack and update hand
#nothin in testHand after extend

print(f"Sum of test Hand: {testHand.hand_sum}")
for i in range(testHand.hand_size):
    print(testHand.card_in_hand_list[i].get_card_type())

################################################################
Game play test for passing out cards
#test player and dealer on a board with gameboard instances
#from turtle import end_fill
from scripts.player import Dealer,Player
from scripts.card import Card
from scripts.hand import Hand
import json
import pygame

pygame.init()
screen = pygame.display.set_mode((500,500))
display = pygame.Surface((500,500))
clock = pygame.time.Clock()


from scripts.stack import DeckPile, Stack

MINIMUM_BET = 50

#create gameboard objects below
dealer = Dealer()
deckpile = DeckPile()
discardpile = Stack()
player = Player()



#load json card objects into Card objects
CARD_PATH_TO_JSON = 'scripts/cards.json'
with open(CARD_PATH_TO_JSON) as jsonfile:
    cards = json.load(jsonfile)
for data_item in cards['card_decks']:
    #create a new card for every iteration
    card_object = Card(
        data_item['type'],
        data_item['pip_value'], 
        data_item['suit'],
        data_item['card_image']
    )
    deckpile.push(card_object)

jsonfile.close()
print(deckpile.size)

#shuffle the deck
deckpile.cut_deck()
deckpile.casino_shuffle()
deckpile.cut_deck()
deckpile.casino_shuffle()
deckpile.cut_deck()
deckpile.casino_shuffle()
for i, card in enumerate(deckpile.stack):
    print(card.type, end= " ")

#Blackjack starts below
print("Welcome to the Black Jack Test")
print("Minimum bet is 50 coins per hand\n")
#get player input, how many hands do player want
print("loop test below")
handAmount = int(input("How many hands are you playing?")) #raise exception error if out side of amount range
#handAmount = 1
print(handAmount)
for i in range(handAmount):
    print("testing")
    player.add_Hand()
    player.subtract_funds(MINIMUM_BET)

print(f"Current Player's funds: {player.fund}")
#place all active hands in a new list
turn_list = []
turn_list.extend(player.hand_list)
turn_list.extend(dealer.hand_list)
print(f"Turn List: {turn_list}")

#this is the passing out cards phase
for rotation in range(2): 
    #pass out one card to each hand
    #print(f"Rotation: {rotation}")#
    for i, hand in enumerate(turn_list):
        #pop top of deck stack and add to that specific hand
        #print(f"Iteration: {i} Hand: {hand}")
        topcard = deckpile.top() 
        deckpile.pop()
        #print(f"Top card of deck stack: {topcard.type}")
        #print(f"Hand: {hand} This is the real hand")
        hand.add_card(topcard)
#print(turn_list[0].card_list[0].type)


#loop through all the hands
for i, hand in enumerate(turn_list):
    #loop through the cards in THAT specific hand
    print(f"Player {i}'s hand:", end = " ")
    for j, card in enumerate(hand.card_list):
        print(hand.card_list[j].type,end = " ")

    #if hand has an Ace card, show two different sum values
    if hand.hasAce:
        print(f"Hand Sum: {hand.hand_sum}")
        print(f"Upper Hand Sum: {hand.hand_upper_sum}")
    else:
        print(f"Hand Sum: {hand.hand_sum}")




def hit(hand, deck): #recieve hand object to hit and update
    print(f"Lengh of deck before hit: {len(deck.stack)}")
    print(f"Current top of deck: {deck.stack[-1].type}")
    print(f"Before hit(): ", end= " ")
    hand.show()
    hand.add_card(deck.stack[-1])
    deck.pop()
    #deck.update_size
    print(f"Lengh of deck before hit: {len(deck.stack)}")
    print(f"Current top of deck: {deck.stack[-1].type}")
    print(f"After hit(): ", end= " " )
    hand.show()
#Testing update: For some reason, the input function is looping 
# and not taking any input, I will retest at home.

    



###########################################################        
#get the player action response
#get the player's action input
turn_counter = 0
while turn_counter < len(turn_list):
    action = input("hit, stand, double, or split\n")

    if action == 'hit':
        hit(turn_list[turn_counter],deckpile) #player will hit a hand
        pass
    elif action == 'stand':
        #stand
        turn_counter += 1
        break       
    elif action == 'split':
        pass
    elif action == 'double':
        pass 
    else:
        print("input error")
        break


while True:

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            exit()

    screen.blit(display,(0,0))
    pygame.display.update()
    clock.tick(60)
      
        






